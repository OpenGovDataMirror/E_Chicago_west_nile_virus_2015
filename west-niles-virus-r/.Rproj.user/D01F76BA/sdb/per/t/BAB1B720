{
    "contents" : "##############################################################\n## trap data\n##############################################################\nrm(list = ls())\nsource(\"fn.base.R\")\n\ntic()\ncat(\"Loading trap data... \\n\")\n\ndata.tr <- fread(fn.in.file(\"train.csv\"))\ndata.test <- fread(fn.in.file(\"test.csv\"))\n\ncols.tr.orig <- colnames(data.tr)\ndata.tr.info <- unique(data.test[, list(Address, Block, Street, Trap,\n                                        AddressNumberAndStreet, \n                                        Latitude, Longitude,\n                                        AddressAccuracy)])\n\ndata.tr.aug <- data.table(expand.grid(Date = unique(data.tr$Date),\n                                      Address = unique(data.test$Address),\n                                      Species = unique(data.test$Species)))\ndata.tr.aug <- merge(data.tr.aug, data.tr.info,\n                     by=c(\"Address\"))\n\ndata.tr.aug <- merge(data.tr.aug, \n                     data.tr[, list(Date, Address, Species,\n                                    NumMosquitos, WnvPresent)],\n                     by=c(\"Date\", \"Address\", \"Species\"),\n                     all.x=T,\n                     allow.cartesian=T)\ndata.tr.aug <- data.tr.aug[, cols.tr.orig, with=F][order(Date, Species)]\n\ndata.tr <- data.tr.aug\n\ndata.tr[, Id := -(.N:1)]\n\n# Used in python scripts\nwrite.csv(\n  data.tr,\n  file = fn.in.file(\"train_aug.csv\"), \n  na = '',\n  row.names = F, quote = T)\n\ndata.test[, NumMosquitos := NA_integer_]\ndata.test[, WnvPresent := NA_integer_]\n\ndata.tr.out.max <- data.tr[\n  !is.na(WnvPresent),\n  list(WnvPresent=max(WnvPresent),\n       WnvPresentSum=sum(WnvPresent),\n       Id = Id[which.max(WnvPresent)]),\n  by=c(\"Date\", \"Trap\", \"Species\")]\ndata.tr.out.max <- data.tr.out.max[, list(Id, WnvPresent, WnvPresentSum)]\nStore(data.tr.out.max)\n\ndata.all.species <- rbind(\n  data.tr[, list(Id, Species)],\n  data.test[, list(Id, Species)])\nsetkeyv(data.all.species, \"Id\")\n\nStore(data.all.species)\n\ncols.first <- c(\"Id\", \"WnvPresent\", \"NumMosquitos\", \"Date\")\ncols.last <- setdiff(colnames(data.tr), cols.first)\ndata.all.trap <- rbind(\n  data.tr[, c(cols.first, cols.last), with=F],\n  data.test[, c(cols.first, cols.last), with=F]\n)\ndata.all.trap <- data.all.trap[order(Id)]\n\nfn.add.date.fields(data.all.trap)\n\ndata.all.trap.fix <- data.all.trap[\n  ,list(\n    NeedFix = length(unique(AddressNumberAndStreet)) > 1,\n    AddressNumberAndStreet = unique(AddressNumberAndStreet),\n    TrapFixed = paste(Trap, 1:length(unique(AddressNumberAndStreet)), sep=\"_\")\n  )\n  ,by=c(\"Trap\")][NeedFix==T]\ndata.all.trap.fix[, NeedFix:= NULL]\n\ndata.all.trap <- merge(data.all.trap, data.all.trap.fix, all.x=T,\n                       by=c(\"Trap\", \"AddressNumberAndStreet\"))\ndata.all.trap[, TrapFixedDiff := TrapFixed]\ndata.all.trap[is.na(TrapFixedDiff), TrapFixedDiff := \"NotFix\"]\n\ndata.all.trap[is.na(TrapFixed), TrapFixed := Trap]\n\nrm(data.all.trap.fix)\n\ntrap.count.key <- c(\"TrapFixed\", \"Date\", \"Species\")\n\ndata.all.trap.count <- data.all.trap[\n  ,list(TrapCount = as.numeric(.N), TrapYear=unique(Year)), \n  by=trap.count.key]\nsetkeyv(data.all.trap.count, trap.count.key)\n\ncols.trap <- colnames(data.all.trap)\ndata.all.trap <- merge(data.all.trap, data.all.trap.count, by=trap.count.key)\ndata.all.trap <- data.all.trap[, c(cols.trap, \"TrapCount\"), with=F]\ndata.all.trap[, TrapCount := TrapCount - 1]\n\ndata.all.out <- data.all.trap[, list(Id, WnvPresent, NumMosquitos, Date, Year)]\nsetkeyv(data.all.out, \"Id\")\ndata.all.trap[, NumMosquitos := NULL]\ndata.all.trap[, WnvPresent := NULL]\ndata.all.trap[, Date := NULL]\n\n# Redundant info\ndata.all.trap[, Address := NULL]\ndata.all.trap[, Street := NULL]\ndata.all.trap[, AddressNumberAndStreet := NULL]\n\n# Factor transform\ndata.all.trap[, Block := factor(Block, levels=sort(unique(Block)))]\ndata.all.trap[, Trap := factor(Trap, levels=sort(unique(Trap)))]\ndata.all.trap[, TrapFixed := factor(TrapFixed, levels=sort(unique(TrapFixed)))]\ndata.all.trap[, TrapFixedDiff := factor(TrapFixedDiff, \n                                        levels=sort(unique(TrapFixedDiff)))]\n\n#                   Species       Mean    N\n# 1:           CULEX ZOTHER 0.00000000  315\n# 2:          CULEX PIPIENS 0.08892182 2699\n# 3: CULEX PIPIENS/RESTUANS 0.05513468 4752\n# 4:         CULEX RESTUANS 0.01788321 2740\n\ndata.all.trap[\n  !Species %chin% c(\"CULEX PIPIENS\", \"CULEX PIPIENS/RESTUANS\", \n                    \"CULEX RESTUANS\"), \n  Species:= \"CULEX ZOTHER\"]\ndata.all.trap[, Species := factor(Species, levels=sort(unique(Species)))]\n\ndata.all.id.zero <- \n  sort(data.all.trap$Id[data.all.trap$Species == \"CULEX ZOTHER\"])\n\nsetkeyv(data.all.trap, \"Id\")\nrm(data.tr, data.test, cols.first, cols.last)\n\nStore(data.all.trap, data.all.out, data.all.id.zero)\n\n# trap distance data\n\ndata.trap.dist <- data.table(\n  expand.grid(TrapFixed1=sort(unique(data.all.trap$TrapFixed)),\n              TrapFixed2=sort(unique(data.all.trap$TrapFixed))))\ndata.trap.dist <- data.trap.dist[TrapFixed2 != TrapFixed1]\n\nfor (ix in 2:1) {\n  col.nam <- paste0(\"TrapFixed\", ix)\n  setnames(data.trap.dist, col.nam, \"TrapFixed\")\n  data.trap.dist <- merge(\n    data.trap.dist, \n    unique(data.all.trap[, list(TrapFixed, Latitude, Longitude)]),\n    by=\"TrapFixed\")\n  setnames(data.trap.dist, \n           c(\"TrapFixed\", \"Latitude\", \"Longitude\"), \n           c(col.nam, paste0(c(\"Lat\", \"Lon\"), ix)))\n}\n\ndata.trap.dist[, Tdist := fn.dist.coord(Lat1, Lon1, Lat2, Lon2)] \ndata.trap.dist[, Lat1:= NULL]\ndata.trap.dist[, Lon1:= NULL]\ndata.trap.dist[, Lat2:= NULL]\ndata.trap.dist[, Lon2:= NULL]\n\ndata.trap.dist <- data.trap.dist[order(TrapFixed2, Tdist)]\nsetkeyv(data.trap.dist, \"TrapFixed1\")\n\nStore(data.trap.dist)\n\ndata.trap.stats.full <- merge(data.all.out, data.all.trap[\n  , list(Id, TrapFixed, TrapCount)], by=\"Id\")\ndata.trap.stats.sum <- data.trap.stats.full[\n  , list(\n    TrapCountPos=length(unique(Year[TrapCount>0])), \n    YrsPos=length(unique(Year[which(WnvPresent>0)])), \n    TotalPos=sum(WnvPresent, na.rm=T))\n  , by=\"TrapFixed\"][order(TrapFixed)]\nsetkeyv(data.trap.stats.sum, c(\"TrapFixed\"))\n\ndata.trap.stats.yr <- data.trap.stats.full[\n  , list(\n    YrsPos2=length(unique(Year[which(WnvPresent>0)])), \n    TotalPos2=sum(WnvPresent, na.rm=T))\n  , by=c(\"TrapFixed\", \"Year\")][order(TrapFixed)]\n\ndata.trap.stats <- merge(data.trap.stats.yr,\n                         data.trap.stats.sum, by=\"TrapFixed\")\ndata.trap.stats[,YrsPos:=YrsPos-YrsPos2]\ndata.trap.stats[,TotalPos:=TotalPos-TotalPos2]\n\ndata.trap.stats[,YrsPos2:=NULL]\ndata.trap.stats[,TotalPos2:=NULL]\n\nsetkeyv(data.trap.stats, c(\"TrapFixed\", \"Year\"))\nStore(data.trap.stats, data.trap.stats.sum)\n\ntoc()\n\n##############################################################\n## weather data\n##############################################################\nrm(list = ls())\nsource(\"fn.base.R\")\n\ntic()\ncat(\"Loading weather data... \\n\")\n\ndata.weather <- fread(fn.in.file(\"weather.csv\"))\ndata.weather.codesum.id <- data.weather[, list(Station, Date, CodeSum)]\ndata.weather[, CodeSum := NULL]\ndata.weather[, Water1 := NULL]\ndata.weather[, Depth := NULL]\n\nfor (col.nam in setdiff(colnames(data.weather), c(\"Station\", \"Date\"))) {\n  suppressWarnings(data.weather[, col.nam := as.numeric(get(col.nam)), with=F])\n}\n\ndata.weather <- merge(\n  data.weather[Station == 1], data.weather[Station == 2], \n  by=\"Date\", suffixes = c(\"St1\", \"St2\"))\ndata.weather[, StationSt1:=NULL]\ndata.weather[, StationSt2:=NULL]\n\ndata.weather <- data.weather[order(Date)]\n\ncols.rm <- c(\n  \"WetBulbSt1\",\n  \"StnPressureSt1\", \"SeaLevelSt1\",  \"ResultSpeedSt1\", \"AvgSpeedSt1\",\n  \"WetBulbSt2\",  \"HeatSt2\", \"CoolSt2\", \"StnPressureSt2\", \"SeaLevelSt2\",\n  \"ResultSpeedSt2\", \"AvgSpeedSt2\", \"SunriseSt2\", \"SunsetSt2\", \n  \"SnowFallSt2\", \"DepartSt2\")\nfor (col.nam in cols.rm) {\n  data.weather[, col.nam:=NULL, with=F]\n}\n\nsetkeyv(data.weather, \"Date\")\nStore(data.weather)\n\nfn.weather.smooth <- function(...) {\n  cols.weather <- colnames(data.weather)\n  data.weather.smooth <- copy(data.weather)\n  fn.add.date.fields(data.weather.smooth)\n  for (feat in cols.weather[-1]) {\n    if (!feat %in% c('SunriseSt1', 'SunsetSt1')) {\n      for (year in 2007:2014) {\n        year.ix <- data.weather.smooth$Year == year\n        model.loess <- loess(\n          as.formula(paste(feat, \"DayYear\", sep=\"~\")), \n          data=data.weather.smooth[year.ix], ...)\n        pred <- predict(model.loess, data.weather.smooth[year.ix])\n        data.weather.smooth[year.ix, feat := pred, with=F]\n      }\n    }\n  }\n  data.weather.smooth <- data.weather.smooth[,cols.weather,with=F]\n  data.weather.smooth[, SunriseSt1 := NULL]\n  data.weather.smooth[, SunsetSt1 := NULL]\n  setkeyv(data.weather.smooth, \"Date\")\n  data.weather.smooth\n}\n\ndata.weather.smooth.01 <- fn.weather.smooth(span = 0.1)\nStore(data.weather.smooth.01)\n\ndata.weather.smooth.02 <- fn.weather.smooth(span = 0.2)\nStore(data.weather.smooth.02)\n\ntoc()\n\n##############################################################\n## history data\n##############################################################\nrm(list = ls())\nsource(\"fn.base.R\")\n\ntic()\ncat(\"Creating history data... \\n\")\n\ndata.all.trap.dup <- merge(\n  data.all.trap[TrapCount > 0, list(Id, TrapFixed, Species, TrapCount)],\n  data.all.out[, list(Id, Date)], by=\"Id\")\n\n\ndata.dup.key <- c(\"Date\", \"TrapFixed\")\ndata.all.trap.dup <- data.all.trap.dup[\n  , list(TrapCount=max(TrapCount)), \n  by=data.dup.key]\n\nsetkeyv(data.all.trap.dup, data.dup.key)\n\ndata.all.trap.hist <- merge(\n  data.all.trap[, list(Id, TrapFixed, Species)],\n  data.all.out[, list(Id, Date)], by=\"Id\")\n\ntrap.dates <- as.Date(data.all.trap.hist$Date, format=\"%Y-%m-%d\")\n\ncat(\"Previous TrapCount features... \\n\")\ndays.back <- 90\ndata.all.trap.mat <- Matrix(data=NA_real_, \n                            nrow=nrow(data.all.trap.hist), \n                            ncol=days.back)\nfor (ix in 1:days.back) {\n  trap.dt <- data.all.trap.hist[,data.dup.key,with=F]\n  trap.dt[, Date := format(trap.dates-ix, format = \"%Y-%m-%d\")]\n  data.all.trap.mat[,ix] <- data.all.trap.dup[trap.dt]$TrapCount\n}\n\ndata.all.trap.hist[\n  , TrapCountPrevAge := apply(data.all.trap.mat, 1, \n                              function(x) \n                                c(which(!is.na(x)), NA_real_)[1])]\ndata.all.trap.hist[\n  , TrapCountPrev := apply(data.all.trap.mat[, 1:10], 1, \n                           function(x) \n                             x[c(which(!is.na(x)), 1)[1]])]\ndata.all.trap.hist[is.na(TrapCountPrev), TrapCountPrev :=0]\n\ndata.all.trap.hist[\n  , TrapCountPrevMean := apply(data.all.trap.mat[,1:30], 1, \n                               mean, na.rm=T)]\n\ncat(\"done. \\n\")\n\ndata.all.trap.hist[, TrapFixed := NULL]\ndata.all.trap.hist[, Species := NULL]\ndata.all.trap.hist[, Date := NULL]\n\nsetkeyv(data.all.trap.hist, \"Id\")\nStore(data.all.trap.hist)\n\ntoc()\n\n\n##############################################################\n## merge all features\n##############################################################\nrm(list = ls())\nsource(\"fn.base.R\")\ntic()\ncat(\"Creating features data... \\n\")\n\n\n\ndata.all.feat <- copy(data.all.trap)\ndata.all.feat <- merge(data.all.feat, data.all.out[, list(Id,Date)], by=\"Id\")\n\nfn.merge <- function(data.add, ...)  {\n  merge(data.all.feat, data.add, by=key(data.add), all.x=T, ...)\n}\n\ndata.all.feat <- fn.merge(data.weather)\ndata.all.feat <- fn.merge(data.weather.smooth.01, suffixes=c(\"\", \"Smth01\"))\ndata.all.feat <- fn.merge(data.weather.smooth.02, suffixes=c(\"\", \"Smth02\"))\n\n# Previous weather features\nweather.dates <- as.Date(data.weather$Date, format=\"%Y-%m-%d\")\nweather.list.prev <- list(\n  Smth01=data.weather.smooth.01,\n  Smth02=data.weather.smooth.02)\nfor (ix in c(1:8)) {\n  for (w.nam in names(weather.list.prev)) {\n    data.weather.prev <- copy(weather.list.prev[[w.nam]])\n    data.weather.prev[, Date := format(weather.dates + ix, format = \"%Y-%m-%d\")]\n    setkeyv(data.weather.prev, key(data.weather))\n    data.all.feat <- fn.merge(data.weather.prev, \n                              suffixes=c(\"\", paste0(\"Prv\",ix, w.nam)))\n  }\n}\n\ndata.all.feat <- fn.merge(data.all.trap.hist)\n\n\ndata.all.feat[, Date := NULL]\nsetkeyv(data.all.feat, \"Id\")\nStore(data.all.feat)\n\n\ndata.all.feat.tree <- fn.data.2.tree(data.all.feat)\n\nsetkeyv(data.all.feat.tree, \"Id\")\nStore(data.all.feat.tree)\ntoc()\n\n\n##############################################################\n## cross validation indexes\n##############################################################\nrm(list = ls())\nsource(\"fn.base.R\")\n\ntic()\ncat(\"Building cv... \")\n\ndata.cv.folds <- fn.cv.folds(data.all.out)\n\nStore(data.cv.folds)\n\ntoc()\n\n##############################################################\n## year multiplier calculation\n##############################################################\nrm(list = ls())\nsource(\"fn.base.R\")\n\ntic()\ncat(\"year multiplier calculation... \\n\")\n\ndata.tmp.01.pred <- data.all.trap[, list(Id, Year, Species)]\ndata.tmp.01.pred[, Pred := 0.0]\nStore(data.tmp.01.pred)\n\ncat(\"using auc... \\n\")\ndata.tr.mult <- NULL\n\nn.reps <- 50\nn.samp <- nrow(data.tmp.01.pred)\nfor (ix in 1:n.reps) {\n  set.seed(ix + 356782)\n  x.ix <- sample(n.samp, ceiling(n.samp*0.3))\n  data.tr.mult.cur <- data.all.out[\n    x.ix, \n    list(\n      AUC = NA_real_, \n      ActRatio = mean(WnvPresent, na.rm=T),\n      N = sum(!is.na(WnvPresent))), \n    by=\"Year\"][!is.na(ActRatio)][order(Year)]\n  data.tr.mult.cur[, ActRatio := ActRatio/max(ActRatio)]\n  for (yr in seq(2007, 2013, 2)) {\n    data.tmp.01.pred[, Pred := as.numeric(Year == yr & Species != \"CULEX ZOTHER\")]\n    res <- fn.print.err(data.tmp.01.pred[x.ix], do.print=F)\n    data.tr.mult.cur[Year == yr, AUC := res$AUC]\n  }\n  data.tr.mult <- rbind(data.tr.mult, data.tr.mult.cur)\n}\nset.seed(Sys.time())\nmodel.mult <- lm(ActRatio ~ AUC + 1, data=data.tr.mult)\ndata.tr.mult.ratio <- data.tr.mult[, list(Year, ActRatio)] \nsetnames(data.tr.mult.ratio, \"ActRatio\", \"PredRatio\")\nStore(data.tr.mult, data.tr.mult.ratio, model.mult)\n\ndata.mult.01 <- data.all.out[\n  , list(AUC = NA_real_, ActRatio = mean(WnvPresent, na.rm=T)), by=\"Year\"]\ndata.mult.01 <- data.mult.01[order(Year + (Year %% 2 == 0)*100)]\ndata.mult.01[Year %% 2 == 1, ActRatio := ActRatio/max(ActRatio)]\ndata.mult.01[Year %% 2 == 0, ActRatio := NA_real_]\nfor (yr in seq(2007, 2013, 2)) {\n  data.tmp.01.pred[, Pred := as.numeric(Year == yr & Species != \"CULEX ZOTHER\")]\n  res <- fn.print.err(data.tmp.01.pred, do.print=F)\n  data.mult.01[Year == yr, AUC := res$AUC]\n}\ndata.mult.01[Year == 2008, AUC := 0.44616]\ndata.mult.01[Year == 2010, AUC := 0.44130]\ndata.mult.01[Year == 2012, AUC := 0.64752]\ndata.mult.01[Year == 2014, AUC := 0.49158]\n\ndata.mult.01[, PredRatio := predict(model.mult, data.mult.01)]\nfor (ix in 0:1) {\n  data.mult.01[Year %% 2 == ix, PredRatio := PredRatio/max(PredRatio)]\n}\n\n# print(data.mult.01[, list(Year, ActRatio, PredRatio)])\n#    Year   ActRatio PredRatio\n# 1: 2007 0.61977825 0.6914741\n# 2: 2009 0.08455269 0.0720780\n# 3: 2011 0.27773953 0.3013745\n# 4: 2013 1.00000000 1.0000000\n# 5: 2008         NA 0.2135175\n# 6: 2010         NA 0.1945351\n# 7: 2012         NA 1.0000000\n# 8: 2014         NA 0.3909214\n\nStore(data.mult.01)\n\n\ntoc()\n\n##############################################################\n## month multiplier calculation \n##############################################################\nrm(list = ls())\nsource(\"fn.base.R\")\n\ntic()\ncat(\"month multiplier calculation... \\n\")\n\ndata.tmp.m.01.pred <- data.all.trap[, list(Id, Year, Month, Species)]\ndata.tmp.m.01.pred[, Pred := 0.0]\nStore(data.tmp.m.01.pred)\n\ncat(\"using auc... \\n\")\ndata.all.out.cur <- merge(\n  data.all.out,\n  data.all.trap[, list(Id, Month, WeekYear, Species, TrapCount)],\n  by=\"Id\")\n\nn.reps <- 40\nn.samp <- nrow(data.tmp.m.01.pred)\n\ndata.tr.m.mult <- NULL\nmult.m.group <- c(\"Year\", \"Month\")\nmult.m.expr <- quote(\n  list(\n    AUC = NA_real_, \n    ActRatio = mean(c(WnvPresent, data.smoother), na.rm=T),\n    Count=sum(length(unique(Date))),\n    CountReps=sum(TrapCount[!duplicated(Date)])\n  )\n)\n\nfn.data.pred <- function(data, year, month) \n  as.numeric(with(data, Year == year & Month == month \n                  & Species != \"CULEX ZOTHER\"))\n\n# data.smoother <- rep(mean(data.all.out$WnvPresent, na.rm=T), 1)\ndata.smoother <- rep(sum(data.all.out$WnvPresent, na.rm=T)/\n                       nrow(data.all.out[Year %% 2 == 1]), 0)\nfor (ix in 1:n.reps) {\n  set.seed(ix + 234579)\n  samp.rate <- 0.3\n  x.ix <- sample(n.samp, ceiling(n.samp*samp.rate))\n  data.tr.m.mult.cur <- data.all.out.cur[\n    x.ix, eval(mult.m.expr), \n    by=mult.m.group][!is.na(ActRatio)][order(Year, Month)]\n  data.tr.m.mult.cur[, Count := Count/samp.rate]\n  data.tr.m.mult.cur[, CountReps := CountReps/samp.rate]\n  \n  for (yr in seq(2007, 2013, 2)) {\n    for (mnth in unique(data.tmp.m.01.pred[Year == yr]$Month)) {\n      data.tmp.m.01.pred[, Pred := fn.data.pred(.SD, yr, mnth)]\n      auc.df <- fn.print.err(data.tmp.m.01.pred[x.ix], do.print=F)\n      data.tr.m.mult.cur[Year == yr & Month == mnth, \n                         AUC := auc.df$AUC]\n    }\n  }\n  data.tr.m.mult <- rbind(data.tr.m.mult, data.tr.m.mult.cur)\n}\nset.seed(Sys.time())\nmodel.m.mult <- lm(ActRatio ~ 1+ AUC, \n                   data=data.tr.m.mult)\ndata.tr.m.mult.ratio <- data.tr.m.mult[, list(Year, Month, ActRatio)] \nsetnames(data.tr.m.mult.ratio, \"ActRatio\", \"PredRatio\")\nStore(data.tr.m.mult, data.tr.m.mult.ratio, model.m.mult)\n\ndata.mult.m.01 <- data.all.out.cur[, eval(mult.m.expr), by=mult.m.group]\ndata.mult.m.01 <- data.mult.m.01[order(Year + (Year %% 2 == 0)*100, Month)]\ndata.mult.m.01[Year %% 2 == 0, ActRatio := NA_real_]\nfor (yr in seq(2007, 2013, 2)) {\n  for (mnth in unique(data.mult.m.01[Year == yr]$Month)) {\n    data.tmp.m.01.pred[ , Pred := fn.data.pred(.SD, yr, mnth)]\n    auc.df <- fn.print.err(data.tmp.m.01.pred, do.print=F)\n    data.mult.m.01[Year == yr & Month == mnth, AUC := auc.df$AUC]\n  }\n}\n\ndata.mult.m.01[Year == 2008 & Month == 6, AUC := 0.48879]\ndata.mult.m.01[Year == 2008 & Month == 7, AUC := 0.46413]\ndata.mult.m.01[Year == 2008 & Month == 8, AUC := 0.48532]\ndata.mult.m.01[Year == 2008 & Month == 9, AUC := 0.50793]\ndata.mult.m.01[Year == 2010 & Month == 6, AUC := 0.48748]\ndata.mult.m.01[Year == 2010 & Month == 7, AUC := 0.47064]\ndata.mult.m.01[Year == 2010 & Month == 8, AUC := 0.49407]\ndata.mult.m.01[Year == 2010 & Month == 9, AUC := 0.49266]\ndata.mult.m.01[Year == 2010 & Month == 10, AUC := 0.49645]\ndata.mult.m.01[Year == 2012 & Month == 6, AUC := 0.48169]\ndata.mult.m.01[Year == 2012 & Month == 7, AUC := 0.59749]\ndata.mult.m.01[Year == 2012 & Month == 8, AUC := 0.58453]\ndata.mult.m.01[Year == 2012 & Month == 9, AUC := 0.48381]\ndata.mult.m.01[Year == 2014 & Month == 6, AUC := 0.47627]\ndata.mult.m.01[Year == 2014 & Month == 7, AUC := 0.47351]\ndata.mult.m.01[Year == 2014 & Month == 8, AUC := 0.53614]\ndata.mult.m.01[Year == 2014 & Month == 9, AUC := 0.50958]\ndata.mult.m.01[Year == 2014 & Month == 10, AUC := 0.49608]\n\n\ndata.mult.m.01 <- data.mult.m.01[!is.na(AUC)]\ndata.mult.m.01[, PredRatio := predict(model.m.mult, data.mult.m.01)]\n\n\nfor (ix in 0:1) {\n  data.mult.m.01[Year %% 2 == ix, PredRatio := PredRatio/max(PredRatio)]\n}\ndata.mult.m.01[PredRatio < 0, PredRatio := 0]\n\n# print(data.mult.m.01[, list(Year, Month, AUC, ActRatio, PredRatio)])\n#     Year Month       AUC    ActRatio  PredRatio\n#  1: 2007     5 0.4987443 0.000000000 0.21165616\n#  2: 2007     6 0.4912104 0.000000000 0.14806056\n#  3: 2007     7 0.4778203 0.010434783 0.03503121\n#  4: 2007     8 0.5921361 0.097560976 1.00000000\n#  5: 2007     9 0.4903506 0.036175711 0.14080227\n#  6: 2007    10 0.4918701 0.009478673 0.15362912\n#  7: 2009     5 0.4970367 0.000000000 1.00000000\n#  8: 2009     6 0.4713712 0.000000000 0.00000000\n#  9: 2009     7 0.4677215 0.006622517 0.00000000\n# 10: 2009     8 0.4901358 0.024064171 0.70466750\n# 11: 2009     9 0.4840952 0.011961722 0.44614965\n# 12: 2009    10 0.4968358 0.000000000 0.99140198\n# 13: 2011     6 0.4824209 0.000000000 0.33579755\n# 14: 2011     7 0.4802480 0.017187500 0.25241588\n# 15: 2011     8 0.4997294 0.048681542 1.00000000\n# 16: 2011     9 0.4947502 0.040740741 0.80892912\n# 17: 2013     6 0.4791093 0.002293578 0.04438339\n# 18: 2013     7 0.4913416 0.037735849 0.14420106\n# 19: 2013     8 0.5962165 0.172661871 1.00000000\n# 20: 2013     9 0.5426771 0.144032922 0.56310829\n# 21: 2008     6 0.4887900          NA 0.44132550\n# 22: 2008     7 0.4641300          NA 0.00000000\n# 23: 2008     8 0.4853200          NA 0.34004021\n# 24: 2008     9 0.5079300          NA 1.00000000\n# 25: 2010     6 0.4874800          NA 0.60622771\n# 26: 2010     7 0.4706400          NA 0.00000000\n# 27: 2010     8 0.4940700          NA 0.89552084\n# 28: 2010     9 0.4926600          NA 0.83362353\n# 29: 2010    10 0.4964500          NA 1.00000000\n# 30: 2012     6 0.4816900          NA 0.06476890\n# 31: 2012     7 0.5974900          NA 1.00000000\n# 32: 2012     8 0.5845300          NA 0.89533165\n# 33: 2012     9 0.4838100          NA 0.08189057\n# 34: 2014     6 0.4762700          NA 0.04161481\n# 35: 2014     7 0.4735100          NA 0.00000000\n# 36: 2014     8 0.5361400          NA 1.00000000\n# 37: 2014     9 0.5095800          NA 0.57483363\n# 38: 2014    10 0.4960800          NA 0.35872873\n\ndata.mult.my <- list(data.mult.m.01, data.mult.01)\nStore(data.mult.m.01, data.mult.my)\n\ntoc()\n",
    "created" : 1434995515686.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3037755521",
    "id" : "BAB1B720",
    "lastKnownWriteTime" : 1434914808,
    "path" : "~/Dropbox/WestNile2015/final_code/west-niles-virus-r/data.build.gbc.R",
    "project_path" : "data.build.gbc.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}