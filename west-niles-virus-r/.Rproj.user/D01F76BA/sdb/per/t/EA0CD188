{
    "contents" : "source(\"data.build.rgf.R\")\n\n#############################################################\n# train rgf model\n#############################################################\nrm(list = ls())\nsource(\"fn.base.R\")\n\nflist <- c(\"Longitude\",\n           \"Latitude\",\n           \"NumBatches\",\n           \"NumBatchesPrevious30Sum\",\n           \"NumBatchesPrevious30Max\",\n           \"DayYear\",\n           \"TS\", \"FG\", \"DewPoint\", \"Tmin\",\n           col.species)\ntarget <- \"WnvPresentBinary\"\n\npredicted.years <- list(2007,\n                        2009,\n                        2011,\n                        2013,\n                        c(2008,2010,2012,2014))\ntrain.years <- list(c(2009, 2011, 2013),\n                    c(2007, 2011, 2013),\n                    c(2007, 2009, 2013),\n                    c(2007, 2009, 2011),\n                    c(2007,2009,2011,2013))\n\nprefix.model <- paste0(\"rgf.model\")\nrgf.data.folder <- \"../data/output-rgf/\"\ntrain.x.file <- paste0(rgf.data.folder, \"train.x.csv\")\ntrain.y.file <- paste0(rgf.data.folder, \"train.y.csv\")\ntest.x.file <- paste0(rgf.data.folder, \"test.x.csv\")\nmodel.file <- paste0(rgf.data.folder, \"rgf.model\")\ntest.y.file <- paste0(rgf.data.folder, \"test.y.csv\")\ntrain.settings.file <- paste0(rgf.data.folder,\"train.rgf.settings\")\ntest.settings.file <- paste0(rgf.data.folder,\"test.rgf.settings\")\n\ntrainSettings <- file(paste0(train.settings.file, \".inp\"))\npars <- paste0(\"train_x_fn=\",train.x.file,\"\\n\",\n               \"train_y_fn=\",train.y.file,\"\\n\",\n               \"model_fn_prefix=\",model.file,\"\\n\",\n               \"reg_L2=\", 0.2, \"\\n\",\n               \"reg_sL2=\", 0.07, \"\\n\",\n               #\"reg_depth=\", 1.01, \"\\n\",\n               \"algorithm=\",\"RGF\",\"\\n\",\n               \"loss=\",\"Log\",\"\\n\",\n               \"num_iteration_opt=\", 7, \"\\n\",\n               \"num_tree_search=\", 1, \"\\n\",\n               \"min_pop=\", 8, \"\\n\",\n               \"opt_stepsize=\", 0.7, \"\\n\",\n               #\"opt_interval=\", 100, \"\\n\",\n               \"test_interval=\",1400,\"\\n\",\n               \"max_leaf_forest=\",1400,\"\\n\",\n               \"Verbose\",\"\\n\")\nwriteLines(pars, trainSettings)\nclose(trainSettings)\n\ncount <- 1\nfor (i in 1:length(predicted.years)) {\n  ix <- which(!is.na(data.all.rgf[[target]]))\n  train.x <- as.data.frame(data.all.rgf[ix][Year %in% train.years[[i]]][,flist,with=F])\n  train.y <- data.all.rgf[ix][Year %in% train.years[[i]]][[target]]\n  test.x <- as.data.frame(data.all.rgf[Year %in% predicted.years[[i]]][,flist,with=F])\n  test.y <- data.all.rgf[Year %in% predicted.years[[i]]][[\"WnvPresentBinary\"]]\n  \n  write.table(\n    train.x,\n    file=train.x.file,\n    row.names = F, quote = F, na = \"\", sep = \" \",\n    append = F, col.names = F\n  )\n  \n  write.table(\n    test.x,\n    file=test.x.file,\n    row.names = F, quote = F, na = \"\", sep = \" \",\n    append = F, col.names = F\n  )\n  \n  if (length(unique(train.y))<3) {\n    write.table((train.y-0.5)*2,\n                file = train.y.file,\n                quote = FALSE,\n                row.names = FALSE,\n                col.names = FALSE)\n  } else {\n    write.table(train.y,\n                file = train.y.file,\n                quote = FALSE,\n                row.names = FALSE,\n                col.names = FALSE)\n  }\n\n  system(paste(\"perl ../rgf1.2/test/call_exe.pl\",\n               \"../rgf1.2/bin/rgf train\",\n               train.settings.file,\n               \">>\", paste0(rgf.data.folder, \"rgf.log\"), \"2>&1\"))\n  \n  models <- list.files(rgf.data.folder, pattern=paste0(\"^\",prefix.model))\n  ix <- which.max(sapply(strsplit(models, \"-\"), function(x) as.numeric(x[2])))\n  model <- models[ix]\n  \n  testSettings<-file(paste0(test.settings.file, \".inp\"))\n  pars <- paste0(\"test_x_fn=\",test.x.file,\"\\n\",\n                 \"model_fn=\",rgf.data.folder, model,\"\\n\",\n                 \"prediction_fn=\", test.y.file,\"\\n\")\n  writeLines(pars, testSettings)\n  close(testSettings)\n  \n  system(paste(\"perl ../rgf1.2/test/call_exe.pl\",\n               \"../rgf1.2/bin/rgf predict\",\n               test.settings.file,\n               \">>\", paste0(rgf.data.folder, \"rgf.log\"), \"2>&1\"))\n  if (length(unique(train.y)) < 3) {\n    pred <- 1/(1+exp(-scan(test.y.file)))\n  } else {\n    pred <- scan(test.y.file)\n    min_pred <- min(pred)\n    max_pred <- max(pred)\n    pred <- (pred - min_pred)/(max_pred - min_pred)\n  }\n  #cat (\"average auc:\", auc(test.y, pred), \"\\n\")\n  \n  cols <- c(\"Trap\", \"TrapUniqueId\", \"Longitude\", \"Latitude\", \"Date\", \"Species\", \"NumBatches\", paste0(\"TrapClosest\", c(1:10)))\n  data.pred.epoch <- data.all.rgf[Year %in% predicted.years[[i]]][,cols,with=F]\n  data.pred.epoch[, Pred := pred]\n  \n  if (count == 1) {\n    data.pred <- copy(data.pred.epoch)\n  } else {\n    data.pred <- rbind(data.pred, data.pred.epoch)\n  }\n  count <- count + 1 \n  tatam <- file.remove(dir(\n    rgf.data.folder, \n    pattern = paste0(\"^\",prefix.model), \n    full.names = T))\n}\ndata.pred <- merge(data.train.test.rgf, data.pred, by=c(\"Trap\",\"Longitude\",\"Latitude\",\"Date\",\"Species\"), all.x=T)\ndata.pred[is.na(Pred), Pred := 0.0]\ndata.pred[,Year := year(as.Date(Date))]\ndata.pred[,Month := month(as.Date(Date))]\nerr1 <- auc(data.pred[!is.na(WnvPresent), WnvPresent], data.pred[!is.na(WnvPresent), Pred])\n\ndata.avg <- data.pred[,list(YearAvgActual = mean(WnvPresent[!is.na(WnvPresent)]),\n                            YearAvgPred = mean(Pred)), by=\"Year\"]\ndata.avg[Year==2008, YearAvgActual := 0.21311596]\ndata.avg[Year==2010, YearAvgActual := 0.19412383]\ndata.avg[Year==2012, YearAvgActual := 1.00000000]\ndata.avg[Year==2014, YearAvgActual := 0.39061037]\ndata.pred <- merge(data.pred, data.avg, by=\"Year\", all.x=T)\n\nerr2 <- auc(data.pred[!is.na(WnvPresent), WnvPresent], \n            data.pred[!is.na(WnvPresent), Pred]*data.pred[!is.na(WnvPresent),YearAvgActual]/data.pred[!is.na(WnvPresent),YearAvgPred])\nerr3 <- auc(data.pred[!is.na(WnvPresent), WnvPresent], \n            rank(data.pred[!is.na(WnvPresent), Pred])*data.pred[!is.na(WnvPresent),YearAvgActual]/data.pred[!is.na(WnvPresent),YearAvgPred])\ndata.pred[, YearAvgPred := NULL]\n\n### closest by location\ndata.pred.closest.loc <- data.pred[,c(\"TrapUniqueId\",\"Date\",\"Species\",\"Pred\"),with=F]\nsetkey(data.pred.closest.loc, TrapUniqueId, Date, Species, Pred)\ndata.pred.closest.loc <- unique(data.pred.closest.loc)\nsetnames(data.pred.closest.loc, c(\"TrapUniqueId\", \"Pred\"), c(\"TrapClosest\", \"PredClosest\"))\n\n### closest by time\ndata.pred.closest.time <- data.pred[,c(\"TrapUniqueId\",\"Date\",\"Species\",\"Pred\"),with=F]\nsetkey(data.pred.closest.time, TrapUniqueId, Date, Species, Pred)\ndata.pred.closest.time <- unique(data.pred.closest.time)\nsetnames(data.pred.closest.time, c(\"Date\", \"Pred\"), c(\"DateClosest\", \"PredClosest\"))\n\n#data.pred[, PredLocTime := Pred]\n#data.pred[, NumTrapsLocTime := 1]\ndata.pred[, PredLocTime := 0]\ndata.pred[, NumTrapsLocTime := 0]\n\n### take an average by closest stations ###\nfor (i in 1:6) { #5\n  setnames(data.pred, paste0(\"TrapClosest\",i), \"TrapClosest\")\n  data.pred <- merge(data.pred, data.pred.closest.loc, by=c(\"TrapClosest\", \"Date\", \"Species\"), all.x=T)\n  data.pred[!is.na(PredClosest), PredLocTime := PredLocTime + PredClosest]\n  data.pred[!is.na(PredClosest), NumTrapsLocTime := NumTrapsLocTime + 1]\n  data.pred[, PredClosest := NULL]\n  setnames(data.pred, \"TrapClosest\", paste0(\"TrapClosest\",i))\n}\n\n### take an average by closest dates ###\nNprevious <- 11\nNfuture <- 7\nfor (i in (-Nprevious):Nfuture) {\n  data.pred.closest.time[, Date := as.character(as.Date(data.pred.closest.time$DateClosest)-i)]\n  data.pred <- merge(data.pred, data.pred.closest.time[, c(\"TrapUniqueId\",\"Date\",\"Species\",\"PredClosest\"),with=F], by=c(\"TrapUniqueId\", \"Date\", \"Species\"), all.x=T)\n  data.pred[!is.na(PredClosest), PredLocTime := PredLocTime + PredClosest]\n  data.pred[!is.na(PredClosest), NumTrapsLocTime := NumTrapsLocTime + 1]\n  data.pred[, PredClosest := NULL]\n}\n\ndata.pred[, PredLocTime := PredLocTime/NumTrapsLocTime]\nerr4 <- auc(data.pred[!is.na(WnvPresent), WnvPresent], \n            data.pred[!is.na(WnvPresent), PredLocTime])\ndata.avg <- data.pred[,list(YearAvgPred = mean(PredLocTime)), by=\"Year\"]\ndata.pred <- merge(data.pred, data.avg, by=\"Year\", all.x=T)\nerr5 <- auc(data.pred[!is.na(WnvPresent), WnvPresent], \n            data.pred[!is.na(WnvPresent), PredLocTime]*data.pred[!is.na(WnvPresent),YearAvgActual]/data.pred[!is.na(WnvPresent),YearAvgPred])\nerr6 <- auc(data.pred[!is.na(WnvPresent), WnvPresent], \n            rank(data.pred[!is.na(WnvPresent), PredLocTime])*data.pred[!is.na(WnvPresent),YearAvgActual]/data.pred[!is.na(WnvPresent),YearAvgPred])\nif (TRUE) {\n  data.rgf.01.pred.smth <- data.pred[,list(Id,PredLocTime,YearAvgActual,YearAvgPred)]\n  data.rgf.01.pred.smth[, Pred := PredLocTime*YearAvgActual/YearAvgPred]\n  data.rgf.01.pred.smth[, PredLocTime := NULL]\n  data.rgf.01.pred.smth[, YearAvgActual := NULL]\n  data.rgf.01.pred.smth[, YearAvgPred := NULL]\n  minWnvPresent <- min(data.rgf.01.pred.smth[, Pred])\n  maxWnvPresent <- max(data.rgf.01.pred.smth[, Pred])\n  data.rgf.01.pred.smth[, Pred := (Pred - minWnvPresent)/(maxWnvPresent - minWnvPresent)]\n  Store(data.rgf.01.pred.smth)\n}\ndata.pred[, YearAvgPred := NULL]\n\n# submission for LB\nif (FALSE) {\n  data.avg <- data.pred[,list(YearAvgPred = mean(PredLocTime)), by=\"Year\"]\n  data.pred <- merge(data.pred, data.avg, by=\"Year\", all.x=T)\n  data.submission <- data.pred[Year %in% c(2008,2010,2012,2014), list(Id, PredLocTime, YearAvgPred, YearAvgActual)]\n  setnames(data.submission, \"PredLocTime\", \"WnvPresent\")\n  data.submission[, WnvPresent := WnvPresent*YearAvgActual/YearAvgPred]\n  minWnvPresent <- min(data.submission[, WnvPresent])\n  maxWnvPresent <- max(data.submission[, WnvPresent])\n  data.submission[, WnvPresent := (WnvPresent - minWnvPresent)/(maxWnvPresent - minWnvPresent)]\n  setkey(data.submission, Id)\n  write.table(as.data.frame(data.submission[,list(Id, WnvPresent)]),\n              file = \"../data/output-rgf/train.rgf.01.csv\",\n              quote = F, sep=\",\", row.names=F, col.names=T)\n}\n\ncat (\"auc for augmented train:\", err1, \"\\n\")\ncat (\"auc for augmented train with multipliers:\", err2, \"\\n\")\ncat (\"auc for augmented train with multipliers by rank:\", err3, \"\\n\")\ncat (\"auc after smoothing by location and time:\", err4, \"\\n\")\ncat (\"auc after smoothing by location and time with multipliers:\", err5, \"\\n\")\ncat (\"auc after smoothing by location and time with multipliers by rank:\", err6, \"\\n\")\n",
    "created" : 1434916713227.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3111631118",
    "id" : "EA0CD188",
    "lastKnownWriteTime" : 1434919650,
    "path" : "~/Dropbox/WestNile2015/final_code/west-niles-virus-r/02 - train.rgf.01.R",
    "project_path" : "02 - train.rgf.01.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}