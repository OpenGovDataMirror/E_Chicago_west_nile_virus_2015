{
    "contents" : "##############################################################\n## trap data\n##############################################################\nrm(list = ls())\nsource(\"fn.base.R\")\n\n\ndata.folder <- \"../data/input/\"\ntrain.file <- \"train.csv\"\ntest.file <- \"test.csv\"\nspray.file <- \"spray.csv\"\nweather.file <- \"weather.csv\"\nweather.station1 <- c(-87.933, 41.995)\nweather.station2 <- c(-87.752, 41.786)\n\n#################################################################\n#################### TRAIN TEST DATA ############################\n#################################################################\n\n### read datasets ###\ndata.train <- fread(paste0(data.folder, train.file))\ndata.test <- fread(paste0(data.folder, test.file))\n\ncols.tr.orig <- colnames(data.train)\ndata.tr.info <- unique(data.test[, list(Address, Block, Street, Trap,\n                                        AddressNumberAndStreet, \n                                        Latitude, Longitude,\n                                        AddressAccuracy)])\ndata.tr.aug <- data.table(expand.grid(Date = unique(data.train$Date),\n                                      Address = unique(data.test$Address),\n                                      Species = unique(data.test$Species)))\ndata.tr.aug <- merge(data.tr.aug, data.tr.info,\n                     by=c(\"Address\"))\ndata.tr.aug <- merge(data.tr.aug, \n                     data.train[, list(Date, Address, Species,\n                                       NumMosquitos, WnvPresent)],\n                     by=c(\"Date\", \"Address\", \"Species\"),\n                     all.x=T,\n                     allow.cartesian=T)\ndata.tr.aug <- data.tr.aug[, cols.tr.orig, with=F][order(Date, Species)]\ndata.train <- data.tr.aug\ndata.train[, Id := -(.N:1)]\n\ndata.train.test.rgf <- rbindlist(list(data.train, data.test), use.names=T, fill=T) \nStore(data.train.test.rgf)\n\n### combine train and test ###\ndata.all.rgf <- rbindlist(list(data.train, data.test), use.names=T, fill=T) \ndata.all.rgf[, Id := NULL]\ndata.all.rgf <- data.all.rgf[Species %in% c(\"CULEX PIPIENS/RESTUANS\", \"CULEX PIPIENS\", \"CULEX RESTUANS\")]\n\n### correct wrong Trap ids ###\ndata.traps <- data.all.rgf[,list(Longitude_count = length(unique(Longitude)), \n                                 Latitude_count = length(unique(Latitude))),by=\"Trap\"]\nix <- union(which(data.traps$Longitude_count>1), which(data.traps$Latitude_count>1))\ntraps.2correct <- data.traps[ix, Trap]\ncat (\"wrong traps\", traps.2correct, \"\\n\")\n\ndata.traps <- data.all.rgf[, list(TrapUniqueId = .GRP), by=c(\"Trap\",\"Longitude\",\"Latitude\")]\ndata.all.rgf <- merge(data.all.rgf, data.traps, by=c(\"Trap\", \"Longitude\", \"Latitude\"), all.x=TRUE)\n\n### remove Address, Block, Street, AddressNumberAndStreet, AddressAccuracy\ndata.all.rgf[, Address := NULL]\ndata.all.rgf[, Block := NULL]\ndata.all.rgf[, Street := NULL]\ndata.all.rgf[, AddressNumberAndStreet := NULL]\ndata.all.rgf[, AddressAccuracy := NULL]\n\n### remove duplicated traps ###\ncols <- c(\"Trap\",\"Longitude\",\"Latitude\",\"Date\",\"Species\",\"TrapUniqueId\")\ndata.all.rgf <- data.all.rgf[,list(NumMosquitos = sum(NumMosquitos),\n                                   NumBatches = .N,\n                                   WnvPresent = sum(WnvPresent)),by=cols]\n\n### get year, month, day, day_rank ###\ndates <- strsplit(data.all.rgf$Date, \"-\")\ndata.all.rgf[, Year := as.numeric(sapply(dates, function(x) x[1]))]\ndata.all.rgf[, Month := as.numeric(sapply(dates, function(x) x[2]))]\ndata.all.rgf[, Day := as.numeric(sapply(dates, function(x) x[3]))]\ndata.day.rank <- data.all.rgf[, list(Year, Month, Day)]\nsetkey(data.day.rank, Year, Month, Day)\ndata.day.rank <- unique(data.day.rank)\ndata.day.rank <- data.day.rank[, list(Day,\n                                      Month,\n                                      DayRank = 31*(Month-5) + Day), by=\"Year\"]\ndata.all.rgf <- merge(data.all.rgf, data.day.rank, by=c(\"Day\",\"Month\",\"Year\"), all.x=TRUE)\n\n### transform Species to dummy variables ###\ndata.species <- data.all.rgf[,list(Species)]\ndata.species[, Species := as.factor(Species)]\ndata.species <- model.matrix(~ . - 1, data.species)\ncolnames(data.species) <- gsub(\" |/\",\"\",colnames(data.species))\ncol.species <- colnames(data.species)\nStore(col.species)\ndata.all.rgf <- cbind(data.all.rgf, data.species)\n\n### get coded Species ###\ndata.all.rgf[, SpeciesTree := 0]\ndata.all.rgf[Species == \"CULEX RESTUANS\", SpeciesTree := 1]\ndata.all.rgf[Species == \"CULEX PIPIENS/RESTUANS\", SpeciesTree := 2]\ndata.all.rgf[Species == \"CULEX PIPIENS\", SpeciesTree := 3]\n\n### get coded Traps ###\ndata.traps <- data.all.rgf[, list(Trap)]\nsetkey(data.traps, Trap)\ndata.traps <- unique(data.traps)\ndata.traps[,TrapTree := c(1:nrow(data.traps))]\ndata.all.rgf <- merge(data.all.rgf, data.traps, by=\"Trap\", all.x=T)\n\ndata.all.rgf[, WeekYear := as.numeric(format(as.Date(Date, format=\"%Y-%m-%d\"), format = \"%V\"))]\ndata.all.rgf[, DayYear := as.numeric(format(as.Date(Date, format=\"%Y-%m-%d\"), format = \"%j\"))]\n\n### add targets\ndata.all.rgf[, WnvPresentBinary := WnvPresent]\ndata.all.rgf[WnvPresent>0, WnvPresentBinary := 1]\n\n### add previous NumBatches ####\nfor (NPreviousBatches in c(30)) {\n  cols <- c(\"TrapUniqueId\", \"Date\", \"Species\")\n  for (i in 1:NPreviousBatches) {\n    data.all.previous <- data.all.rgf[,c(cols, \"NumBatches\"),with=F]\n    setnames(data.all.previous, \"NumBatches\", paste0(\"NumBatches\", NPreviousBatches-i))\n    data.all.previous[, Date := as.character(as.Date(data.all.previous$Date)+i)]\n    data.all.rgf <- merge(data.all.rgf, data.all.previous, by=cols, all.x=TRUE)\n  }\n  col.numbatches <- c(paste0(\"NumBatches\",c(0:(NPreviousBatches-1))))\n  data.numbatches <- as.matrix(data.all.rgf[,col.numbatches,with=F])\n  data.numbatches <- t(apply(data.numbatches, 1, function(x) c(max(x[!is.na(x)]),\n                                                               sum(x[!is.na(x)]))))\n  data.numbatches[is.na(data.numbatches)] <- 0\n  data.numbatches[data.numbatches==-Inf] <- 0\n  colnames(data.numbatches) <- c(paste0(\"NumBatchesPrevious\",NPreviousBatches,\"Max\"),\n                                 paste0(\"NumBatchesPrevious\",NPreviousBatches,\"Sum\"))\n  for (col in col.numbatches) {\n    setnames(data.all.rgf, col, \"feature\")\n    data.all.rgf[, feature := NULL]\n  }\n  data.all.rgf <- cbind(data.all.rgf, data.numbatches)\n}\n\n### add N closest traps ###\nNclosest <- 10\ndata.traps <- data.all.rgf[,list(TrapUniqueId, Longitude, Latitude)]\nsetkey(data.traps, TrapUniqueId, Longitude, Latitude)\ndata.traps <- unique(data.traps)\ndata.traps.loc <- as.matrix(data.traps[,list(Longitude, Latitude)])\nix <- as.matrix(expand.grid(1:nrow(data.traps.loc), 1:nrow(data.traps.loc)))\ndata.traps.dist <- distHaversine(data.traps.loc[ix[,2],], data.traps.loc[ix[,1],], r = 6378.137)\ndata.traps.dist <- matrix(data.traps.dist, ncol=nrow(data.traps.loc), byrow=T)\ntraps <- data.traps$TrapUniqueId\ndata.traps.closest <- t(apply(data.traps.dist, 1, function(x) traps[sort(x, index.return=T)$ix[2:(1+Nclosest)]]))\n#data.traps.dist.closest <- t(apply(data.traps.dist, 1, function(x) sort(x)[2:(1+Nclosest)]))\n#data.traps.closest[which(data.traps.dist.closest>3)] <- NA\ndata.traps <- cbind(data.traps, as.data.table(data.traps.closest))\nsetnames(data.traps, paste0(\"V\",c(1:Nclosest)), paste0(\"TrapClosest\", c(1:Nclosest)))\ndata.all.rgf <- merge(data.all.rgf, data.traps, by=c(\"TrapUniqueId\",\"Longitude\",\"Latitude\"), all.x=T)\n\n#################################################################\n###################### WEATHER DATA #############################\n#################################################################\n\ndata.weather <- fread(paste0(data.folder, weather.file))\ndata.weather[, Depth := NULL]\ndata.weather[, Water1 := NULL]\ndata.weather[grepl(\"T\", SnowFall), SnowFall := \"0.05\"]\ndata.weather[grepl(\"T\", PrecipTotal), PrecipTotal := \"0.005\"]\n\n### fill data from one weather station to another one ###\ncols <- setdiff(colnames(data.weather), c(\"Station\", \"Date\"))\ndata.weather.station1 <- data.weather[Station == 1]\ndata.weather.station1[, Station := NULL]\nsetnames(data.weather.station1, cols, paste0(cols, \"_station1\"))\ndata.weather.station2 <- data.weather[Station == 2]\nsetnames(data.weather.station2, cols, paste0(cols, \"_station2\"))\ndata.weather.station2[, Station := NULL]\ndata.weather.stations <- merge(data.weather.station1, data.weather.station2, by=\"Date\")\nfor (col in cols) {\n  setnames(data.weather.stations, paste0(col,\"_station1\"), \"feature_station1\")\n  setnames(data.weather.stations, paste0(col,\"_station2\"), \"feature_station2\")\n  data.weather.stations[feature_station1 == \"M\" \n                        | feature_station1 == \"-\" \n                        | feature_station1 == \"\", feature_station1 := feature_station2]\n  data.weather.stations[feature_station2 == \"M\" \n                        | feature_station2 == \"-\" \n                        | feature_station2 == \"\", feature_station2 := feature_station1]\n  setnames(data.weather.stations, \"feature_station1\", paste0(col,\"_station1\"))\n  setnames(data.weather.stations, \"feature_station2\", paste0(col,\"_station2\"))\n}\n\ndata.weather.station1 <- data.weather.stations[,c(\"Date\", paste0(cols,\"_station1\")), with=F]\nsetnames(data.weather.station1, paste0(cols, \"_station1\"), cols)\ndata.weather.station1[, Station := 1]\ndata.weather.station2 <- data.weather.stations[,c(\"Date\", paste0(cols,\"_station2\")), with=F]\nsetnames(data.weather.station2, paste0(cols, \"_station2\"), cols)\ndata.weather.station2[, Station := 2]\n\ndata.weather <- rbindlist(list(data.weather.station1, data.weather.station2), use.names=T, fill=T) \nsetkey(data.weather, Date)\n\ncols <- setdiff(colnames(data.weather), c(\"Station\", \"Date\", \"CodeSum\"))\nfor (col in cols) {\n  setnames(data.weather, col, \"feature\")\n  ix <- which(data.weather$feature==\"M\" | data.weather$feature == \"\" | data.weather$feature == \"-\" | is.na(data.weather$feature))\n  if (length(ix) > 0) {\n    data.weather[ix, feature := \"-1\"]\n  }\n  data.weather[, feature := as.numeric(feature)]\n  setnames(data.weather, \"feature\", col)  \n}\n\ndata.weather[, Id := as.integer(c(1:nrow(data.weather)))]\nweather.codes <- strsplit(data.weather$CodeSum, \" \")\ndata.weather.codes <- data.table(Id = unlist(sapply(c(1:nrow(data.weather)), function(x) rep(data.weather$Id[x], length(weather.codes[[x]])))),\n                                 CodeSum = unlist(weather.codes),\n                                 Count = 1)\ndata.weather.codes <- dcast.data.table(data.weather.codes, \n                                       Id~CodeSum,\n                                       fill = 0,\n                                       value.var = \"Count\")\nsetnames(data.weather.codes, \n         colnames(data.weather.codes), \n         gsub(\"\\\\+\", \"PLUS\", colnames(data.weather.codes)))\ndata.weather.codes[, V1 := NULL]\ndata.weather <- merge(data.weather, data.weather.codes, by=\"Id\")\ndata.weather[, CodeSum := NULL]\ndata.weather[, Id := NULL]\n\n### closest weather station for each trap ###\ndata.traps <- data.all.rgf[,list(Trap, Longitude, Latitude)]\nsetkey(data.traps, Trap, Longitude, Latitude)\ndata.traps <- unique(data.traps)\ndists1 <- distHaversine(as.matrix(data.traps[,list(Longitude, Latitude)]), weather.station1, r = 6378.137)\ndists2 <- distHaversine(as.matrix(data.traps[,list(Longitude, Latitude)]), weather.station2, r = 6378.137)\ndata.traps[, Station := as.numeric(dists1>dists2)+1]\ndata.all.rgf <- merge(data.all.rgf, data.traps, by=c(\"Trap\",\"Longitude\",\"Latitude\"), all.x=TRUE)\n### add weather information to the main data ###\ndata.all.rgf <- merge(data.all.rgf, data.weather, by=c(\"Date\", \"Station\"), all.x=TRUE)\nStore(data.all.rgf)\n",
    "created" : 1435009464619.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3749485285",
    "id" : "52AD6DA3",
    "lastKnownWriteTime" : 1434917090,
    "path" : "~/Dropbox/WestNile2015/final_code/west-niles-virus-r/data.build.rgf.R",
    "project_path" : "data.build.rgf.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}